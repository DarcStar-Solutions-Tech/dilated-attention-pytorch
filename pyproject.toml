[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "dilated-attention-pytorch"
dynamic = ["version"]
description = "Unofficial PyTorch implementation of DilatedAttention from LongNet"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "Michael Harris", email = "mharris021@hotmail.com" },
    { name = "Frank Odom", email = "frank.odom.iii@gmail.com" },
]
maintainers = [
    { name = "Michael Harris", email = "mharris021@hotmail.com" },
]
keywords = [
    "attention",
    "transformer",
    "pytorch",
    "dilated-attention",
    "longnet",
    "ring-attention",
    "flash-attention",
    "machine-learning",
    "deep-learning",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.12"
dependencies = [
    "torch>=2.0.0",
    "einops>=0.8.0",
    "torchscale>=0.3.0",
]

[project.optional-dependencies]
cuda = [
    "xformers>=0.0.20",
    "flash-attn>=2.8.0,<4.0.0",  # Support latest FA2 and upcoming FA3
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
]
dev = [
    "dilated-attention-pytorch[test]",
    "pre-commit>=3.0.0",
    "hatch>=1.8.0",
]
benchmark = [
    "plotly>=5.16.0",
    "kaleido>=0.2.1",
    "timm>=0.6.13",
]
distributed = [
    "deepspeed>=0.15.0",
    "fairscale>=0.4.0",
    "lightning>=2.3.0",
]
experimental = [
    # Flash Attention 3 (beta) - requires H100/H800 + CUDA >= 12.3
    # Install manually: git+https://github.com/togethercomputer/flash-attention-3.git
    # For now, relies on enhanced FA2 integration
]
all = [
    "dilated-attention-pytorch[test,dev,benchmark,distributed]",
]

[project.urls]
Homepage = "https://github.com/fkodom/dilated-attention-pytorch"
Documentation = "https://github.com/fkodom/dilated-attention-pytorch/blob/main/README.md"
Repository = "https://github.com/fkodom/dilated-attention-pytorch"
Issues = "https://github.com/fkodom/dilated-attention-pytorch/issues"
Changelog = "https://github.com/fkodom/dilated-attention-pytorch/releases"

[tool.hatch.version]
path = "dilated_attention_pytorch/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["dilated_attention_pytorch"]

[tool.hatch.build.targets.sdist]
include = [
    "/dilated_attention_pytorch",
    "/tests",
    "/README.md",
    "/LICENSE",
    "/CLAUDE.md",
]

[tool.hatch.envs.default]
dependencies = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov=dilated_attention_pytorch --cov-report=term-missing {args:tests}"
test-fast = "pytest -x {args:tests}"
lint = "ruff check {args:.}"
format = "ruff format {args:.}"
format-check = "ruff format --check {args:.}"
fix = "ruff check --fix {args:.}"
typecheck = "mypy {args:dilated_attention_pytorch}"
all = [
    "format",
    "lint", 
    "typecheck",
    "test-cov",
]

[tool.hatch.envs.benchmark]
extra-dependencies = [
    "plotly>=5.16.0",
    "kaleido>=0.2.1",
    "timm>=0.6.13",
]

[tool.hatch.envs.benchmark.scripts]
run = "python benchmark.py {args}"
profile = "python -m cProfile -o benchmark.prof benchmark.py {args}"

[tool.hatch.envs.distributed]
extra-dependencies = [
    "deepspeed>=0.15.0",
    "fairscale>=0.4.0",
    "lightning>=2.3.0",
]

[tool.hatch.envs.distributed.scripts]
test-distributed = "pytest tests/ -k distributed {args}"

# Tool configurations
[tool.ruff]
target-version = "py312"
line-length = 100
extend-include = ["*.pyx"]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["dilated_attention_pytorch"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "xformers.*",
    "flash_attn.*",
    "deepspeed.*",
    "fairscale.*",
    "plotly.*",
    "kaleido.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "-ra",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests that require GPU",
    "distributed: marks tests that require distributed setup",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["dilated_attention_pytorch"]
omit = [
    "*/tests/*",
    "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
