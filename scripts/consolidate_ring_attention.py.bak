#!/usr/bin/env python3
"""
Script to consolidate Ring Attention implementations.

This script:
1. Identifies deprecated/redundant Ring Attention files
2. Updates imports to use the consolidated versions
3. Removes deprecated files
4. Updates tests and benchmarks
"""

import os
import shutil
from pathlib import Path
import re
from typing import List, Dict, Tuple

# Project root
PROJECT_ROOT = Path(__file__).parent.parent

# Mapping of deprecated files to their replacements
DEPRECATED_FILES = {
    "ring_attention_correct.py": "ring_dilated_attention_v2.py",
    "ring_attention_correct_v2.py": "ring_dilated_attention_v2.py", 
    "ring_dilated_attention_fixed.py": "ring_dilated_attention_v2.py",
    "ring_distributed_refactored.py": "ring_distributed_dilated_attention.py",
}

# Import replacements
IMPORT_REPLACEMENTS = {
    "from .ring_attention_correct import RingAttentionCorrect": 
        "from .ring_dilated_attention_v2 import RingDilatedAttentionV2",
    "from .ring_attention_correct_v2 import RingAttentionCorrectV2": 
        "from .ring_dilated_attention_v2 import RingDilatedAttentionV2",
    "from dilated_attention_pytorch.ring_attention_correct import": 
        "from dilated_attention_pytorch.ring_dilated_attention_v2 import",
    "from dilated_attention_pytorch.ring_attention_correct_v2 import": 
        "from dilated_attention_pytorch.ring_dilated_attention_v2 import",
    "from dilated_attention_pytorch.ring_dilated_attention_fixed import": 
        "from dilated_attention_pytorch.ring_dilated_attention_v2 import",
    "RingAttentionCorrect(": "RingDilatedAttentionV2(",
    "RingAttentionCorrectV2(": "RingDilatedAttentionV2(",
    "RingDilatedAttentionFixed(": "RingDilatedAttentionV2(",
}

# Files to check for updates
FILES_TO_UPDATE = [
    "tests/test_ring_attention_v2.py",
    "tests/test_ring_attention_fixed.py", 
    "benchmarks/benchmark_ring_attention_v2.py",
    "benchmarks/benchmark_fixed_ring_attention.py",
    "benchmarks/benchmark_billion_token_correct.py",
    "benchmarks/benchmark_ring_attention_multi_gpu.py",
]

# Deprecated test/benchmark files to remove
DEPRECATED_TEST_FILES = [
    "tests/test_ring_attention_v2.py",
    "tests/test_ring_attention_fixed.py",
    "benchmarks/benchmark_ring_attention_v2.py", 
    "benchmarks/benchmark_fixed_ring_attention.py",
    "benchmarks/benchmark_billion_token_correct.py",
]


def backup_file(filepath: Path) -> Path:
    """Create a backup of a file."""
    backup_path = filepath.with_suffix(filepath.suffix + ".bak")
    shutil.copy2(filepath, backup_path)
    return backup_path


def update_imports_in_file(filepath: Path, dry_run: bool = True) -> List[str]:
    """Update imports in a single file."""
    changes = []
    
    if not filepath.exists():
        return changes
    
    content = filepath.read_text()
    original_content = content
    
    # Apply import replacements
    for old_import, new_import in IMPORT_REPLACEMENTS.items():
        if old_import in content:
            content = content.replace(old_import, new_import)
            changes.append(f"  - Replaced: {old_import}")
            changes.append(f"    With: {new_import}")
    
    # If changes were made, write the file
    if content != original_content:
        if not dry_run:
            backup_file(filepath)
            filepath.write_text(content)
            changes.append(f"  ✓ File updated: {filepath}")
        else:
            changes.append(f"  → Would update: {filepath}")
    
    return changes


def consolidate_ring_attention(dry_run: bool = True):
    """Main consolidation function."""
    print("Ring Attention Consolidation Script")
    print("=" * 60)
    print(f"Mode: {'DRY RUN' if dry_run else 'EXECUTE'}")
    print()
    
    all_changes = []
    
    # Step 1: Check deprecated files
    print("Step 1: Checking deprecated files...")
    src_dir = PROJECT_ROOT / "dilated_attention_pytorch"
    for deprecated_file, replacement in DEPRECATED_FILES.items():
        deprecated_path = src_dir / deprecated_file
        if deprecated_path.exists():
            print(f"  Found deprecated: {deprecated_file}")
            print(f"    → Will be replaced by: {replacement}")
            if not dry_run:
                backup_file(deprecated_path)
                # Don't remove yet - do it after updating imports
            all_changes.append(f"Remove {deprecated_file}")
    
    # Step 2: Update imports in Python files
    print("\nStep 2: Updating imports...")
    
    # Update specific files
    for file_path in FILES_TO_UPDATE:
        full_path = PROJECT_ROOT / file_path
        changes = update_imports_in_file(full_path, dry_run)
        if changes:
            print(f"\n{file_path}:")
            for change in changes:
                print(change)
            all_changes.extend(changes)
    
    # Also search for any other files that might import deprecated modules
    print("\nSearching for other files with deprecated imports...")
    for root, dirs, files in os.walk(PROJECT_ROOT):
        # Skip certain directories
        if any(skip in root for skip in ['.git', '__pycache__', '.pytest_cache', 'docs']):
            continue
            
        for file in files:
            if file.endswith('.py'):
                filepath = Path(root) / file
                # Skip the deprecated files themselves
                if filepath.name in DEPRECATED_FILES:
                    continue
                    
                # Check if file contains deprecated imports
                try:
                    content = filepath.read_text()
                    has_deprecated = any(old in content for old in IMPORT_REPLACEMENTS.keys())
                    
                    if has_deprecated:
                        changes = update_imports_in_file(filepath, dry_run)
                        if changes:
                            print(f"\n{filepath.relative_to(PROJECT_ROOT)}:")
                            for change in changes:
                                print(change)
                            all_changes.extend(changes)
                except Exception as e:
                    print(f"  Error reading {filepath}: {e}")
    
    # Step 3: Remove deprecated files
    if not dry_run:
        print("\nStep 3: Removing deprecated files...")
        
        # Remove deprecated source files
        for deprecated_file in DEPRECATED_FILES.keys():
            deprecated_path = src_dir / deprecated_file
            if deprecated_path.exists():
                deprecated_path.unlink()
                print(f"  ✓ Removed: {deprecated_file}")
        
        # Remove deprecated test/benchmark files
        for test_file in DEPRECATED_TEST_FILES:
            test_path = PROJECT_ROOT / test_file
            if test_path.exists():
                backup_file(test_path)
                test_path.unlink()
                print(f"  ✓ Removed: {test_file}")
    
    # Summary
    print("\n" + "=" * 60)
    print("Summary:")
    print(f"  Total changes: {len(all_changes)}")
    
    if dry_run:
        print("\nThis was a DRY RUN. To execute changes, run with --execute flag")
    else:
        print("\nConsolidation complete! Backups created with .bak extension")
    
    return all_changes


def main():
    """Main entry point."""
    import argparse
    
    parser = argparse.ArgumentParser(
        description="Consolidate Ring Attention implementations"
    )
    parser.add_argument(
        "--execute", 
        action="store_true",
        help="Execute the consolidation (default is dry run)"
    )
    
    args = parser.parse_args()
    
    consolidate_ring_attention(dry_run=not args.execute)


if __name__ == "__main__":
    main()